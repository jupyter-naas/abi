@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dc11: <http://purl.org/dc/elements/1.1/> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix bfo: <http://purl.obolibrary.org/obo/> .
@prefix cco: <https://www.commoncoreontologies.org/> .
@prefix abi: <http://ontology.naas.ai/abi/> .
@prefix intentMapping: <http://ontology.naas.ai/intentMapping/> .

########################################################
# Queries
########################################################

# Who has the name starting with "John"? (person)
intentMapping:SanaxGetPersonsByNamePrefix a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_get_persons_by_name_prefix"@en ;
    intentMapping:intentDescription "Find all people whose names start with a specific prefix." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?locationName ?linkedinUrl ?positionLabel
        WHERE {
          # Find people whose names start with the prefix.
          ?person a cco:ont00001262 ;
                  rdfs:label ?personName .
          FILTER(STRSTARTS(LCASE(STR(?personName)), LCASE("{{ name_prefix }}")))
          
          # Get location if it exists
          OPTIONAL {
            ?person bfo:BFO_0000171 ?location .
            ?location rdfs:label ?locationName .
          }

          # Get LinkedIn profile URL if it exists
          OPTIONAL {
            ?person abi:hasLinkedInPage ?linkedinPage .
            ?linkedinPage abi:linkedin_url ?linkedinUrl .
          }

          # Get position if it exists
          OPTIONAL {
            ?person abi:holdsPosition ?position .
            ?position rdfs:label ?positionLabel .
          }
        }
        ORDER BY ?personName
    """ ;
    intentMapping:hasArgument intentMapping:namePrefixArg .

# Search for person by name
intentMapping:SanaxSearchPersonsByName a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_search_persons_by_name"@en ;
    intentMapping:intentDescription "Search for people by name in the triple store." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?similarity ?linkedinUrl ?locationName ?positionLabel
        WHERE {
          # Find all people
          ?person a cco:ont00001262 ;
                  rdfs:label ?personName .
          
          # Get LinkedIn profile URL
          OPTIONAL {
            ?person abi:hasLinkedInPage ?linkedinPage .
            ?linkedinPage abi:linkedin_url ?linkedinUrl .
          }
          
          # Get location
          OPTIONAL {
            ?person bfo:BFO_0000171 ?location .
            ?location rdfs:label ?locationName .
          }

          # Get position if it exists
          OPTIONAL {
            ?person abi:holdsPosition ?position .
            ?position rdfs:label ?positionLabel .
          }
          
          BIND(
            IF(LCASE(STR(?personName)) = LCASE("{{ search_term }}"), 1.0,
            IF(STRSTARTS(LCASE(STR(?personName)), LCASE("{{ search_term }}")), 0.9,
            IF(CONTAINS(LCASE(STR(?personName)), LCASE("{{ search_term }}")), 0.8,
            IF(STRENDS(LCASE(STR(?personName)), LCASE("{{ search_term }}")), 0.7,
            0.0)))) AS ?similarity
          )
          
          # Only return results with some similarity
          FILTER(?similarity > 0.0)
        }
        ORDER BY DESC(?similarity) ?personName
    """ ;
    intentMapping:hasArgument intentMapping:searchTermArg .

# List all persons
intentMapping:SanaxListPersons a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_list_persons"@en ;
    intentMapping:intentDescription "List all persons in the triple store with their details." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?linkedinUrl ?locationName ?positionLabel
        WHERE {
          # Get all persons
          ?person a cco:ont00001262 ;
                  rdfs:label ?personName .
          
          # Get LinkedIn profile URL if exists
          OPTIONAL {
            ?person abi:hasLinkedInPage ?linkedinPage .
            ?linkedinPage abi:linkedin_url ?linkedinUrl .
          }
          
          # Get location if exists
          OPTIONAL {
            ?person bfo:BFO_0000171 ?location .
            ?location rdfs:label ?locationName .
          }

          # Get position if exists
          OPTIONAL {
            ?person abi:holdsPosition ?position .
            ?position rdfs:label ?positionLabel .
          }
        }
        ORDER BY ?personName
        LIMIT 50
    """ .

# Get information about X (person)
intentMapping:SanaxGetPersonInformation a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_get_information_about_person"@en ;
    intentMapping:intentDescription "Get comprehensive information about a specific person including their positions, companies, LinkedIn profile, and location." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?locationName ?linkedinUrl ?employmentLabel ?positionLabel ?company ?companyName ?startDate
        WHERE {
          # Find people whose names match exactly
          ?person a cco:ont00001262 ;
                  rdfs:label ?personName .
          FILTER(LCASE(STR(?personName)) = LCASE("{{ person_name }}"))
          
          # Get location if it exists
          OPTIONAL {
            ?person bfo:BFO_0000171 ?location .
            ?location rdfs:label ?locationName .
          }

          # Get LinkedIn profile URL if it exists
          OPTIONAL {
            ?person abi:hasLinkedInPage ?linkedinPage .
            ?linkedinPage abi:linkedin_url ?linkedinUrl .
          }
          # Get positions and employment associations
          OPTIONAL {
            ?association a cco:ont00000433 ;
                        rdfs:label ?employmentLabel ;
                        bfo:BFO_0000057 ?person, ?company ;
                        bfo:BFO_0000055 ?position .
            OPTIONAL { ?position rdfs:label ?positionLabel . }
            OPTIONAL { ?company rdfs:label ?companyName . }
            
            OPTIONAL { 
              ?association abi:startDate ?startDateEntity .
              ?startDateEntity rdfs:label ?startDate .
            }
          }
        }
        ORDER BY DESC(?startDate)
    """ ;
    intentMapping:hasArgument intentMapping:personNameArg .

# Search for companies by name
intentMapping:SanaxSearchCompaniesByName a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_search_companies_by_name"@en ;
    intentMapping:intentDescription "Search for companies by name in the triple store." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?company ?companyName ?similarity ?linkedinUrl
        WHERE {
          # Find all companies
          ?company a cco:ont00001180 ;
                  rdfs:label ?companyName .
          
          # Get LinkedIn company page URL
          OPTIONAL {
            ?company abi:hasLinkedInPage ?linkedinPage .
            ?linkedinPage abi:linkedin_url ?linkedinUrl .
          }
          
          BIND(
            IF(LCASE(STR(?companyName)) = LCASE("{{ search_term }}"), 1.0,
            IF(STRSTARTS(LCASE(STR(?companyName)), LCASE("{{ search_term }}")), 0.9,
            IF(CONTAINS(LCASE(STR(?companyName)), LCASE("{{ search_term }}")), 0.8,
            IF(STRENDS(LCASE(STR(?companyName)), LCASE("{{ search_term }}")), 0.7,
            0.0)))) AS ?similarity
          )
          
          # Only return results with some similarity
          FILTER(?similarity > 0.0)
        }
        ORDER BY DESC(?similarity) ?companyName
    """ ;
    intentMapping:hasArgument intentMapping:searchTermArg .

# List all companies
intentMapping:SanaxListCompanies a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_list_companies"@en ;
    intentMapping:intentDescription "List all companies in the triple store (limited to 50 results)." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?company ?companyName ?linkedinUrl
        WHERE {
          # Get all companies
          ?company a cco:ont00001180 ;
                  rdfs:label ?companyName .
          
          # Get LinkedIn company page URL if available
          OPTIONAL {
            ?company abi:hasLinkedInPage ?linkedinPage .
            ?linkedinPage abi:linkedin_url ?linkedinUrl .
          }
        }
        ORDER BY ?companyName
        LIMIT 50
    """ .

# Get people working for X (company)
intentMapping:SanaxGetCompanyEmployeesQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_get_company_employees"@en ;
    intentMapping:intentDescription "Find all people working for a specific organization/company." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?positionLabel ?linkedinUrl
        WHERE {
          # Find the company by name
          ?company a cco:ont00001180 ;
                  rdfs:label ?companyName .
          FILTER(LCASE(STR(?companyName)) = LCASE("{{ company_name }}"))
          
          # Find employment associations with this company
          ?association a cco:ont00000433 ;
                      bfo:BFO_0000057 ?person, ?company .
          
          # Get person details
          ?person a cco:ont00001262 ;
                 rdfs:label ?personName .
          
          # Get location if it exists
          OPTIONAL {
            ?person bfo:BFO_0000171 ?location .
            ?location rdfs:label ?locationName .
          }

          # Get LinkedIn profile URL if it exists
          OPTIONAL {
            ?person abi:hasLinkedInPage ?linkedinPage .
            ?linkedinPage abi:linkedin_url ?linkedinUrl .
          }

          # Get position if it exists
          OPTIONAL {
            ?person abi:holdsPosition ?position .
            ?position rdfs:label ?positionLabel .
          }
        }
        ORDER BY ?personName
    """ ;
    intentMapping:hasArgument intentMapping:companyNameArg .

# Get people holding position X
intentMapping:SanaxGetPeopleHoldingPositionQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_get_people_holding_position"@en ;
    intentMapping:intentDescription "Find all people who hold a specific position/role" ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?position ?positionLabel ?company ?companyName ?startDate ?linkedinUrl ?matchType
        WHERE {
          # Find positions with either perfect or partial matches
          ?position a bfo:BFO_0000023 ;
                   rdfs:label ?positionLabel .
          
          # Create match type indicator
          BIND(
            IF(LCASE(STR(?positionLabel)) = LCASE("{{ position_title }}"), "perfect",
               IF(CONTAINS(LCASE(STR(?positionLabel)), LCASE("{{ position_title }}")), "partial", "none")
            ) AS ?matchType
          )
          
          # Filter to only include perfect or partial matches
          FILTER(?matchType != "none")
          
          # Find people who hold this position
          ?person abi:holdsPosition ?position ;
                 a cco:ont00001262 ;
                 rdfs:label ?personName .
          
          # Get LinkedIn profile URL
          OPTIONAL {
            ?person abi:hasLinkedInPage ?linkedinPage .
            ?linkedinPage abi:linkedin_url ?linkedinUrl .
          }
          
          # Find employment associations that realize this position
          OPTIONAL {
            ?association a cco:ont00000433 ;
                        bfo:BFO_0000057 ?person, ?company ;
                        bfo:BFO_0000055 ?position .
            ?company a cco:ont00001180 ;
                    rdfs:label ?companyName .
            OPTIONAL { 
              ?association abi:startDate ?startDateEntity . 
              ?startDateEntity rdfs:label ?startDate . 
            }
          }
        }
        ORDER BY ?matchType ?personName
    """ ;
    intentMapping:hasArgument intentMapping:positionTitleArg .

# Search for locations by name
intentMapping:SanaxSearchLocationsByName a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_search_locations_by_name"@en ;
    intentMapping:intentDescription "Search for locations by name in the triple store." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?location ?locationName ?similarity
        WHERE {
          # Find all locations
          ?location a <http://ontology.naas.ai/abi/linkedin/Location> ;
                   rdfs:label ?locationName .
          
          BIND(
            IF(LCASE(STR(?locationName)) = LCASE("{{ search_term }}"), 1.0,
            IF(STRSTARTS(LCASE(STR(?locationName)), LCASE("{{ search_term }}")), 0.9,
            IF(CONTAINS(LCASE(STR(?locationName)), LCASE("{{ search_term }}")), 0.8,
            IF(STRENDS(LCASE(STR(?locationName)), LCASE("{{ search_term }}")), 0.7,
            0.0)))) AS ?similarity
          )
          
          # Only return results with some similarity
          FILTER(?similarity > 0.0)
        }
        ORDER BY DESC(?similarity) ?locationName
    """ ;
    intentMapping:hasArgument intentMapping:searchTermArg .

# List all locations
intentMapping:SanaxListLocations a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_list_locations"@en ;
    intentMapping:intentDescription "List all locations in the triple store." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?location ?locationName
        WHERE {
          # Find all locations
          ?location a <http://ontology.naas.ai/abi/linkedin/Location> ;
                   rdfs:label ?locationName .
        }
        ORDER BY ?locationName
        LIMIT 50
    """ .

# Get people located in X (location)
intentMapping:SanaxGetPeopleLocatedInLocationQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_get_people_located_in_location"@en ;
    intentMapping:intentDescription "Find all people located in a specific location" ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?linkedinUrl ?position ?positionLabel ?locationName
        WHERE {
          # Find the location by name
          ?location a <http://ontology.naas.ai/abi/linkedin/Location> ;
                   rdfs:label ?locationName .
          FILTER(CONTAINS(LCASE(STR(?locationName)), LCASE("{{ location_name }}")))
          
          # Find people located there
          ?location bfo:BFO_0000124 ?person .
          ?person a cco:ont00001262 ;
                 rdfs:label ?personName .
          
          # Get LinkedIn profile URL
          OPTIONAL {
            ?person abi:hasLinkedInPage ?linkedinPage .
            ?linkedinPage abi:linkedin_url ?linkedinUrl .
          }
          
          # Get current position
          OPTIONAL {
            ?person abi:holdsPosition ?position .
            ?position rdfs:label ?positionLabel .
          }
        }
        ORDER BY ?personName
    """ ;
    intentMapping:hasArgument intentMapping:locationNameArg .

# Get people who started their job most recently
intentMapping:SanaxGetPeopleWithMostRecentJobStartsQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_get_people_with_most_recent_job_starts"@en ;
    intentMapping:intentDescription "Get people who started their job/role/position most recently." ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?companyName ?positionLabel ?startDate ?locationName
        WHERE {
          # Find employment associations with start dates
          ?association a cco:ont00000433 ;
                      bfo:BFO_0000057 ?person, ?company ;
                      abi:startDate ?startDateEntity .
          
          ?startDateEntity rdfs:label ?startDate .
          
          # Get person details
          ?person a cco:ont00001262 ;
                 rdfs:label ?personName .
          
          # Get company details
          ?company a cco:ont00001180 ;
                  rdfs:label ?companyName .
          
          # Get position if available
          OPTIONAL {
            ?association bfo:BFO_0000055 ?position .
            ?position rdfs:label ?positionLabel .
          }
          
          # Get location information
          OPTIONAL {
            ?person bfo:BFO_0000171 ?location .
            ?location rdfs:label ?locationName .
          }

          # Filter by company name if provided
          FILTER(
            "{{ company_name }}" = "" ||
            CONTAINS(LCASE(STR(?companyName)), LCASE("{{ company_name }}"))
          )

          # Filter by location if provided
          FILTER(
            "{{ location_name }}" = "" ||
            EXISTS {
              ?person bfo:BFO_0000171 ?location .
              ?location rdfs:label ?locationName .
              FILTER(CONTAINS(LCASE(STR(?locationName)), LCASE("{{ location_name }}")))
            }
          )
        }
        ORDER BY DESC(?startDate)
        LIMIT {{ limit }}
    """ ;
    intentMapping:hasArgument intentMapping:limitArg ;
    intentMapping:hasArgument intentMapping:locationNameArg ;
    intentMapping:hasArgument intentMapping:companyNameArg .

# Get people who started their job longest ago
intentMapping:SanaxGetPeopleWithOldestJobStartsQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_get_people_with_longest_job_starts"@en ;
    intentMapping:intentDescription "Get people who started their job/role/position longest ago" ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?companyName ?positionLabel ?startDate ?locationName
        WHERE {
          # Find employment associations with start dates and required position
          ?association a cco:ont00000433 ;
                      bfo:BFO_0000057 ?person, ?company ;
                      bfo:BFO_0000055 ?position ;
                      abi:startDate ?startDateEntity .
          
          ?startDateEntity rdfs:label ?startDate .
          
          # Get person details
          ?person a cco:ont00001262 ;
                 rdfs:label ?personName .
          
          # Get company details
          ?company a cco:ont00001180 ;
                  rdfs:label ?companyName .
          
          # Get position details (required)
          ?position rdfs:label ?positionLabel .

          # Filter by company name if provided
          FILTER(
            "{{ company_name }}" = "" ||
            CONTAINS(LCASE(STR(?companyName)), LCASE("{{ company_name }}"))
          )

          # Filter by location if provided
          FILTER(
            "{{ location_name }}" = "" ||
            EXISTS {
              ?person bfo:BFO_0000171 ?location .
              ?location rdfs:label ?locationName .
              FILTER(CONTAINS(LCASE(STR(?locationName)), LCASE("{{ location_name }}")))
            }
          )
        }
        ORDER BY ?startDate
        LIMIT {{ limit }}
    """ ;
    intentMapping:hasArgument intentMapping:limitArg ;
    intentMapping:hasArgument intentMapping:locationNameArg ;
    intentMapping:hasArgument intentMapping:companyNameArg .

# Get people who have been working for a company the longest
intentMapping:SanaxGetPeopleWithLongestTenureQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "sanax_get_people_with_longest_tenure"@en ;
    intentMapping:intentDescription "Get people who have been working for a company the longest" ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX bfo: <http://purl.obolibrary.org/obo/>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX abi: <http://ontology.naas.ai/abi/>

        SELECT DISTINCT ?person ?personName ?companyName ?startDate ?locationName
        WHERE {
          # Find employment associations with start dates
          ?association a cco:ont00000433 ;
                      bfo:BFO_0000057 ?person, ?company ;
                      abi:startDate ?startDateEntity .
          
          ?startDateEntity rdfs:label ?startDate .
          
          # Get person details
          ?person a cco:ont00001262 ;
                 rdfs:label ?personName .
          
          # Get company details
          ?company a cco:ont00001180 ;
                  rdfs:label ?companyName .

          # Get location if it exists
          OPTIONAL {
            ?person bfo:BFO_0000171 ?location .
            ?location rdfs:label ?locationName .
          }

          # Enforce empty string if location_name not provided
          BIND(COALESCE("{{ location_name }}", "") AS ?locationFilter)

          # Enforce empty string if company_name not provided  
          BIND(COALESCE("{{ company_name }}", "") AS ?companyFilter)

          # Filter by company name if provided
          FILTER(
            ?companyFilter = "" ||
            CONTAINS(LCASE(STR(?companyName)), LCASE(?companyFilter))
          )

          # Filter by location if provided
          FILTER(
            ?locationFilter = "" ||
            EXISTS {
              ?person bfo:BFO_0000171 ?location .
              FILTER(CONTAINS(LCASE(STR(?locationName)), LCASE(?locationFilter)))
            }
          )
        }
        ORDER BY ASC(?startDate)
        LIMIT 10
    """ ;
    intentMapping:hasArgument intentMapping:locationNameArg ;
    intentMapping:hasArgument intentMapping:companyNameArg .

########################################################
# Arguments
########################################################

intentMapping:namePrefixArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "name_prefix" ;
    intentMapping:argumentDescription "Name prefix to search for (e.g., 'John')" ;
    intentMapping:validationPattern "." ;
    intentMapping:validationFormat "name_prefix" .

intentMapping:personNameArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "person_name" ;
    intentMapping:argumentDescription "Full name of the person (must include first and last name)" ;
    intentMapping:validationPattern "^.+\\s+.+$" ;
    intentMapping:validationFormat "person_name" .

intentMapping:positionTitleArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "position_title" ;
    intentMapping:argumentDescription "Title of the position/role to search for" ;
    intentMapping:validationPattern "." ;
    intentMapping:validationFormat "position_title" .

intentMapping:companyNameArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "company_name" ;
    intentMapping:argumentDescription "Name of the company/organization to find employees for" ;
    intentMapping:validationPattern "^$|." ;
    intentMapping:validationFormat "company_name" .

intentMapping:locationNameArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "location_name" ;
    intentMapping:argumentDescription "Name of the location to search for people in" ;
    intentMapping:validationPattern "^$|." ;
    intentMapping:validationFormat "location_name" .

intentMapping:limitArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "limit" ;
    intentMapping:argumentDescription "Number of results to return (default: 10)" ;
    intentMapping:validationPattern "^[0-9]+$" ;
    intentMapping:validationFormat "integer" .

intentMapping:searchTermArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_term" ;
    intentMapping:argumentDescription "Search term for fuzzy matching (e.g., 'Jo Smit' to find 'John Smith')" ;
    intentMapping:validationPattern "." ;
    intentMapping:validationFormat "search_term" .