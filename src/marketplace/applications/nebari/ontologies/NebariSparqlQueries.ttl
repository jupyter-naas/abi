@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dc11: <http://purl.org/dc/elements/1.1/> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix bfo: <http://purl.obolibrary.org/obo/> .
@prefix cco: <https://www.commoncoreontologies.org/> .
@prefix intentMapping: <http://ontology.naas.ai/intentMapping/> .

intentMapping:searchClassQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "search_class"@en ;
    intentMapping:intentDescription "Search for ontology classes based on their labels, definitions, examples, and comments" ;
    intentMapping:sparqlNebari """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

        SELECT DISTINCT ?class ?label ?score ?definition ?example ?comment
        WHERE {
          # Find all classes in the ontology
          {
            ?class a owl:Class .
          } UNION {
            ?class a rdfs:Class .
          }
          
          # Create a score for each class based on matching properties
          {
            # Exact match with rdfs:label gets highest score (10)
            ?class rdfs:label ?label .
            FILTER(LCASE(STR(?label)) = LCASE("{{ search_label }}"))
            BIND(10 AS ?score)
          } UNION {
            # Contains match with rdfs:label gets good score (8)
            ?class rdfs:label ?label .
            FILTER(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")))
            BIND(8 AS ?score)
          } UNION {
            # Exact match with skos:definition gets medium score (6)
            ?class skos:definition ?label .
            FILTER(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")))
            BIND(6 AS ?score)
          } UNION {
            # Contains match with skos:example gets lower score (4)
            ?class skos:example ?label .
            FILTER(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")))
            BIND(4 AS ?score)
          } UNION {
            # Contains match with skos:comment gets lowest score (2)
            ?class skos:comment ?label .
            FILTER(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")))
            BIND(2 AS ?score)
          }
          
          # Get additional properties if they exist
          OPTIONAL { ?class skos:definition ?definition }
          OPTIONAL { ?class skos:example ?example }
          OPTIONAL { ?class skos:comment ?comment }
        }
        ORDER BY DESC(?score)
        LIMIT 10
    """ ;
    intentMapping:hasArgument intentMapping:classSearchLabelArg .

intentMapping:classSearchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "Class label to search for in the ontology schema" ;
    intentMapping:validationPattern "." ;
    intentMapping:validationFormat "class_label" .