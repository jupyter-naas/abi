@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dc11: <http://purl.org/dc/elements/1.1/> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix bfo: <http://purl.obolibrary.org/obo/> .
@prefix cco: <https://www.commoncoreontologies.org/> .
@prefix abi: <http://ontology.naas.ai/abi/> .

<http://ontology.naas.ai/abi/TemplatableSparqlQueryOntology> a owl:Ontology ;
    owl:versionIRI <https://github.com/jupyter-naas/abi/tree/cli/src/core/modules/abi/ontologies/domain-level/TemplatableSparqlQueryOntology.ttl> ;
    dc11:contributor "Jeremy Ravenel" , "Maxime Jublou" , "Florent Ravenel" ;
    dc:description "Templatable Sparql Query Ontology."@en ;
    dc:license "" ;
    dc:title "Templatable Sparql Query Ontology" .

#################################################################
#    Classes
#################################################################

abi:TemplatableSparqlQuery a owl:Class ;
    rdfs:subClassOf bfo:BFO_0000031 ;
    rdfs:label "Templatable SPARQL Query"@en ;
    rdfs:comment "A class representing a SPARQL query that can be templated with variables and includes intent information."@en .

abi:QueryArgument a owl:Class ;
    rdfs:subClassOf bfo:BFO_0000031 ;
    rdfs:label "Query Argument"@en ;
    rdfs:comment "A class representing an argument that can be used to template a SPARQL query."@en .

#################################################################
#    Object Properties
#################################################################

abi:hasArgument a owl:ObjectProperty ;
    rdfs:label "has argument"@en ;
    rdfs:domain abi:TemplatableSparqlQuery ;
    rdfs:range abi:QueryArgument ;
    rdfs:comment "Links a templatable SPARQL query to its arguments."@en .

#################################################################
#    Data Properties
#################################################################

abi:intentDescription a owl:DatatypeProperty ;
    rdfs:label "intent description"@en ;
    rdfs:domain abi:TemplatableSparqlQuery ;
    rdfs:range xsd:string ;
    rdfs:comment "A natural language description of the query's intent."@en .

abi:sparqlTemplate a owl:DatatypeProperty ;
    rdfs:label "SPARQL template"@en ;
    rdfs:domain abi:TemplatableSparqlQuery ;
    rdfs:range xsd:string ;
    rdfs:comment "The SPARQL query template with variable placeholders."@en .

abi:argumentName a owl:DatatypeProperty ;
    rdfs:label "argument name"@en ;
    rdfs:domain abi:QueryArgument ;
    rdfs:range xsd:string ;
    rdfs:comment "The name of the argument used in the template."@en .

abi:argumentDescription a owl:DatatypeProperty ;
    rdfs:label "argument description"@en ;
    rdfs:domain abi:QueryArgument ;
    rdfs:range xsd:string ;
    rdfs:comment "A description of what the argument represents."@en .

abi:validationPattern a owl:DatatypeProperty ;
    rdfs:label "validation pattern"@en ;
    rdfs:domain abi:QueryArgument ;
    rdfs:range xsd:string ;
    rdfs:comment "A regex pattern for validating the argument value."@en .

abi:validationFormat a owl:DatatypeProperty ;
    rdfs:label "validation format"@en ;
    rdfs:domain abi:QueryArgument ;
    rdfs:range xsd:string ;
    rdfs:comment "The expected format of the argument value (e.g., date, number, URI)."@en .

#################################################################
#    Example Usage
#################################################################

# # Example of a query to find employees in a department with optional name filter:
# abi:findEmployeesQuery a abi:TemplatableSparqlQuery ;
#     rdfs:label "findEmployeesQuery"@en ;
#     abi:intentDescription "Find all employees working in a specific department, optionally filtered by name" ;
#     abi:sparqlTemplate """
#         SELECT ?employee ?name
#         WHERE {
#             ?employee :worksIn :{{ department_id }} ;
#                     :hasName ?name .
#             {% if employee_name %}
#             FILTER(CONTAINS(LCASE(?name), LCASE("{{ employee_name }}")))
#             {% endif %}
#         }
#     """ ;
#     abi:hasArgument abi:departmentArg, abi:nameArg .

# abi:departmentArg a abi:QueryArgument ;
#     abi:argumentName "department_id" ;
#     abi:argumentDescription "The unique identifier of the department" ;
#     abi:validationPattern "^[A-Z0-9]{3,}$" ;
#     abi:validationFormat "department_id" .

# abi:nameArg a abi:QueryArgument ;
#     abi:argumentName "employee_name" ;
#     abi:argumentDescription "Optional name to filter employees (case-insensitive partial match)" ;
#     abi:validationPattern "^[a-zA-Z0-9\\s-]{2,50}$" ;
#     abi:validationFormat "employee_name" .

# #################################################################

