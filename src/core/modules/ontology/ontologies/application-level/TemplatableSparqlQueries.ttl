@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dc11: <http://purl.org/dc/elements/1.1/> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix bfo: <http://purl.obolibrary.org/obo/> .
@prefix cco: <https://www.commoncoreontologies.org/> .
@prefix intentMapping: <http://ontology.naas.ai/intentMapping/> .

intentMapping:searchPersonQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "searchPersonQuery"@en ;
    intentMapping:intentDescription "Search for persons in the ontology based on their name, with exact and partial matching" ;
    intentMapping:sparqlTemplate """
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        SELECT DISTINCT ?class_uri ?individual_uri ?label (MAX(?temp_score) AS ?score)
        WHERE {
            # Filter On Class URI and ensure individual is a NamedIndividual
            ?individual_uri a ?class_uri ;
                            a owl:NamedIndividual ;
                            rdfs:label ?label .
            FILTER(?class_uri = <https://www.commoncoreontologies.org/ont00001262>)
            
            # Calculate scores for perfect and partial matches
            BIND(IF(LCASE(STR(?label)) = LCASE("{{ search_label }}"), 10, 0) AS ?perfect_score)
            BIND(IF(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")), 8, 0) AS ?partial_score)
            
            # Use the higher of the two scores
            BIND(IF(?perfect_score > ?partial_score, ?perfect_score, ?partial_score) AS ?temp_score)
            
            # Only include results with a score > 0
            FILTER(?temp_score > 0)
        }
        GROUP BY ?class_uri ?individual_uri ?label
        ORDER BY DESC(?score) ?label
    """ ;
    intentMapping:hasArgument intentMapping:searchLabelArg .

intentMapping:searchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "The name or partial name of the person to search for" ;
    intentMapping:validationPattern "^[a-zA-Z0-9\\s-]{1,100}$" ;
    intentMapping:validationFormat "person_name" .

intentMapping:searchClassQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "searchClassQuery"@en ;
    intentMapping:intentDescription "Search for ontology classes based on their labels, definitions, examples, and comments" ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

        SELECT DISTINCT ?class ?label ?score ?definition ?example ?comment
        WHERE {
          # Find all classes in the ontology
          {
            ?class a owl:Class .
          } UNION {
            ?class a rdfs:Class .
          }
          
          # Create a score for each class based on matching properties
          {
            # Exact match with rdfs:label gets highest score (10)
            ?class rdfs:label ?label .
            FILTER(LCASE(STR(?label)) = LCASE("{{ search_label }}"))
            BIND(10 AS ?score)
          } UNION {
            # Contains match with rdfs:label gets good score (8)
            ?class rdfs:label ?label .
            FILTER(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")))
            BIND(8 AS ?score)
          } UNION {
            # Exact match with skos:definition gets medium score (6)
            ?class skos:definition ?label .
            FILTER(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")))
            BIND(6 AS ?score)
          } UNION {
            # Contains match with skos:example gets lower score (4)
            ?class skos:example ?label .
            FILTER(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")))
            BIND(4 AS ?score)
          } UNION {
            # Contains match with skos:comment gets lowest score (2)
            ?class skos:comment ?label .
            FILTER(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")))
            BIND(2 AS ?score)
          }
          
          # Get additional properties if they exist
          OPTIONAL { ?class skos:definition ?definition }
          OPTIONAL { ?class skos:example ?example }
          OPTIONAL { ?class skos:comment ?comment }
        }
        ORDER BY DESC(?score)
        LIMIT 10
    """ ;
    intentMapping:hasArgument intentMapping:classSearchLabelArg .

intentMapping:classSearchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "Class label to search for in the ontology schema" ;
    intentMapping:validationPattern "^[a-zA-Z0-9\\s-]{1,100}$" ;
    intentMapping:validationFormat "class_label" .


intentMapping:searchTickerQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "searchTickerQuery"@en ;
    intentMapping:intentDescription "Search for ticker symbols in the ontology" ;
    intentMapping:sparqlTemplate """
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        SELECT DISTINCT ?class_uri ?individual_uri ?label (MAX(?temp_score) AS ?score)
        WHERE {
            # Filter On Class URI and ensure individual is a NamedIndividual
            ?individual_uri a ?class_uri ;
                            a owl:NamedIndividual ;
                            rdfs:label ?label .
            FILTER(?class_uri = <http://ontology.naas.ai/abi/Ticker>)
            
            # Calculate scores for perfect and partial matches
            BIND(IF(LCASE(STR(?label)) = LCASE("{{ search_label }}"), 10, 0) AS ?perfect_score)
            BIND(IF(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")), 8, 0) AS ?partial_score)
            
            # Use the higher of the two scores
            BIND(IF(?perfect_score > ?partial_score, ?perfect_score, ?partial_score) AS ?temp_score)
            
            # Only include results with a score > 0
            FILTER(?temp_score > 0)
        }
        GROUP BY ?class_uri ?individual_uri ?label
        ORDER BY DESC(?score) ?label
    """ ;
    intentMapping:hasArgument intentMapping:tickerSearchLabelArg .

intentMapping:tickerSearchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "Ticker symbol to search for (e.g., 'AAPL')" ;
    intentMapping:validationPattern "^[A-Z0-9.]{1,10}$" ;
    intentMapping:validationFormat "ticker_symbol" .

intentMapping:searchSkillQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "searchSkillQuery"@en ;
    intentMapping:intentDescription "Search for skills in the ontology" ;
    intentMapping:sparqlTemplate """
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        SELECT DISTINCT ?class_uri ?individual_uri ?label (MAX(?temp_score) AS ?score)
        WHERE {
            # Filter On Class URI and ensure individual is a NamedIndividual
            ?individual_uri a ?class_uri ;
                            a owl:NamedIndividual ;
                            rdfs:label ?label .
            FILTER(?class_uri = <https://www.commoncoreontologies.org/ont00000089>)
            
            # Calculate scores for perfect and partial matches
            BIND(IF(LCASE(STR(?label)) = LCASE("{{ search_label }}"), 10, 0) AS ?perfect_score)
            BIND(IF(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")), 8, 0) AS ?partial_score)
            
            # Use the higher of the two scores
            BIND(IF(?perfect_score > ?partial_score, ?perfect_score, ?partial_score) AS ?temp_score)
            
            # Only include results with a score > 0
            FILTER(?temp_score > 0)
        }
        GROUP BY ?class_uri ?individual_uri ?label
        ORDER BY DESC(?score) ?label
    """ ;
    intentMapping:hasArgument intentMapping:skillSearchLabelArg .

intentMapping:skillSearchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "Name of the skill to search for in the ontology schema" ;
    intentMapping:validationPattern "^[a-zA-Z0-9\\s-]{1,100}$" ;
    intentMapping:validationFormat "skill_name" .

intentMapping:searchWebsiteQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "searchWebsiteQuery"@en ;
    intentMapping:intentDescription "Search for websites in the ontology" ;
    intentMapping:sparqlTemplate """
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        SELECT DISTINCT ?class_uri ?individual_uri ?label (MAX(?temp_score) AS ?score)
        WHERE {
            # Filter On Class URI and ensure individual is a NamedIndividual
            ?individual_uri a ?class_uri ;
                            a owl:NamedIndividual ;
                            rdfs:label ?label .
            FILTER(?class_uri = <http://ontology.naas.ai/abi/Website>)
            
            # Calculate scores for perfect and partial matches
            BIND(IF(LCASE(STR(?label)) = LCASE("{{ search_label }}"), 10, 0) AS ?perfect_score)
            BIND(IF(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")), 8, 0) AS ?partial_score)
            
            # Use the higher of the two scores
            BIND(IF(?perfect_score > ?partial_score, ?perfect_score, ?partial_score) AS ?temp_score)
            
            # Only include results with a score > 0
            FILTER(?temp_score > 0)
        }
        GROUP BY ?class_uri ?individual_uri ?label
        ORDER BY DESC(?score) ?label
    """ ;
    intentMapping:hasArgument intentMapping:websiteSearchLabelArg .

intentMapping:websiteSearchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "Website URL to search for" ;
    intentMapping:validationPattern "^[a-zA-Z0-9-._/:]+$" ;
    intentMapping:validationFormat "website_url" .

intentMapping:searchLegalNameQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "searchLegalNameQuery"@en ;
    intentMapping:intentDescription "Search for legal names in the ontology" ;
    intentMapping:sparqlTemplate """
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        SELECT DISTINCT ?class_uri ?individual_uri ?label (MAX(?temp_score) AS ?score)
        WHERE {
            # Filter On Class URI and ensure individual is a NamedIndividual
            ?individual_uri a ?class_uri ;
                            a owl:NamedIndividual ;
                            rdfs:label ?label .
            FILTER(?class_uri = <https://www.commoncoreontologies.org/ont00001331>)
            
            # Calculate scores for perfect and partial matches
            BIND(IF(LCASE(STR(?label)) = LCASE("{{ search_label }}"), 10, 0) AS ?perfect_score)
            BIND(IF(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")), 8, 0) AS ?partial_score)
            
            # Use the higher of the two scores
            BIND(IF(?perfect_score > ?partial_score, ?perfect_score, ?partial_score) AS ?temp_score)
            
            # Only include results with a score > 0
            FILTER(?temp_score > 0)
        }
        GROUP BY ?class_uri ?individual_uri ?label
        ORDER BY DESC(?score) ?label
    """ ;
    intentMapping:hasArgument intentMapping:legalNameSearchLabelArg .

intentMapping:legalNameSearchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "Legal name to search for" ;
    intentMapping:validationPattern "^[a-zA-Z0-9\\s-]{1,200}$" ;
    intentMapping:validationFormat "legal_name" .

intentMapping:searchLinkedInPageQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "searchLinkedInPageQuery"@en ;
    intentMapping:intentDescription "Search for LinkedIn pages in the ontology" ;
    intentMapping:sparqlTemplate """
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX abi: <http://ontology.naas.ai/abi/>
        
        SELECT DISTINCT ?class_uri ?individual_uri ?label (MAX(?temp_score) AS ?score)
        WHERE {
            # Get all subclasses of LinkedInPage
            {
                SELECT DISTINCT ?subclass
                WHERE {
                    ?subclass rdfs:subClassOf+ abi:LinkedInPage .
                }
            }
            
            # Filter On Class URI and ensure individual is a NamedIndividual
            ?individual_uri a ?class_uri ;
                            a owl:NamedIndividual ;
                            rdfs:label ?label .
            VALUES ?class_uri { ?subclass }
            
            # Calculate scores for perfect and partial matches
            BIND(IF(LCASE(STR(?label)) = LCASE("{{ search_label }}"), 10, 0) AS ?perfect_score)
            BIND(IF(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")), 8, 0) AS ?partial_score)
            
            # Use the higher of the two scores
            BIND(IF(?perfect_score > ?partial_score, ?perfect_score, ?partial_score) AS ?temp_score)
            
            # Only include results with a score > 0
            FILTER(?temp_score > 0)
        }
        GROUP BY ?class_uri ?individual_uri ?label
        ORDER BY DESC(?score) ?label
    """ ;
    intentMapping:hasArgument intentMapping:linkedInSearchLabelArg .

intentMapping:linkedInSearchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "LinkedIn page URL to search for" ;
    intentMapping:validationPattern "^[a-zA-Z0-9\\s-]{1,200}$" ;
    intentMapping:validationFormat "linkedin_url" .

intentMapping:searchCommercialOrganizationQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "searchCommercialOrganizationQuery"@en ;
    intentMapping:intentDescription "Search for commercial organizations in the ontology" ;
    intentMapping:sparqlTemplate """
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        SELECT DISTINCT ?class_uri ?individual_uri ?label (MAX(?temp_score) AS ?score)
        WHERE {
            # Filter On Class URI and ensure individual is a NamedIndividual
            ?individual_uri a ?class_uri ;
                            a owl:NamedIndividual ;
                            rdfs:label ?label .
            FILTER(?class_uri = <https://www.commoncoreontologies.org/ont00000443>)
            
            # Calculate scores for perfect and partial matches
            BIND(IF(LCASE(STR(?label)) = LCASE("{{ search_label }}"), 10, 0) AS ?perfect_score)
            BIND(IF(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")), 8, 0) AS ?partial_score)
            
            # Use the higher of the two scores
            BIND(IF(?perfect_score > ?partial_score, ?perfect_score, ?partial_score) AS ?temp_score)
            
            # Only include results with a score > 0
            FILTER(?temp_score > 0)
        }
        GROUP BY ?class_uri ?individual_uri ?label
        ORDER BY DESC(?score) ?label
    """ ;
    intentMapping:hasArgument intentMapping:commercialOrgSearchLabelArg .

intentMapping:commercialOrgSearchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "Name of the commercial organization to search for in the ontology schema" ;
    intentMapping:validationPattern "^[a-zA-Z0-9\\s-]{1,200}$" ;
    intentMapping:validationFormat "organization_name" .

intentMapping:getPersonsAssociatedWithSkillQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "getPersonsAssociatedWithSkillQuery"@en ;
    intentMapping:intentDescription "Get all persons associated with a specific skill" ;
    intentMapping:sparqlTemplate """
        PREFIX abi: <http://ontology.naas.ai/abi/>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>

        SELECT DISTINCT ?person_label
        WHERE {
            ?skill a owl:NamedIndividual ;
                    rdfs:label "{{ skill_label }}" ;
                    abi:isSkillOf ?person .
            ?person rdfs:label ?person_label .
        }
    """ ;
    intentMapping:hasArgument intentMapping:skillLabelArg .

intentMapping:skillLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "skill_label" ;
    intentMapping:argumentDescription "Label of the skill to search persons having it" ;
    intentMapping:validationPattern "^[a-zA-Z0-9\\s-]{1,100}$" ;
    intentMapping:validationFormat "skill_label" .

intentMapping:getSkillsAssociatedWithPersonQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "getSkillsAssociatedWithPersonQuery"@en ;
    intentMapping:intentDescription "Get all skills associated with a specific person" ;
    intentMapping:sparqlTemplate """
        PREFIX abi: <http://ontology.naas.ai/abi/>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX cco: <https://www.commoncoreontologies.org/>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>

        SELECT DISTINCT ?skill_label
        WHERE {
            ?person a owl:NamedIndividual ;
                    rdfs:label "{{ person_name }}" ;
                    abi:hasSkill ?skill .
            ?skill rdfs:label ?skill_label .
        }
    """ ;
    intentMapping:hasArgument intentMapping:personNameArg .

intentMapping:personNameArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "person_name" ;
    intentMapping:argumentDescription "Name of the person to search skills of" ;
    intentMapping:validationPattern "^[a-zA-Z0-9\\s-]{1,100}$" ;
    intentMapping:validationFormat "person_name" .

intentMapping:getIndividualsFromClassQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "getIndividualsFromClassQuery"@en ;
    intentMapping:intentDescription "Get all individuals that are instances of a specific class" ;
    intentMapping:sparqlTemplate """
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

        SELECT DISTINCT ?label
        WHERE {
            ?class a <{{ class_uri }}> ;
                    rdfs:label ?label .
        }
        ORDER BY ?label
    """ ;
    intentMapping:hasArgument intentMapping:classUriArg .

intentMapping:classUriArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "class_uri" ;
    intentMapping:argumentDescription "URI of the class to get all individuals from" ;
    intentMapping:validationPattern "^[^\\s<>]+$" ;
    intentMapping:validationFormat "class_uri" .

intentMapping:searchPowerPointPresentationQuery a intentMapping:TemplatableSparqlQuery ;
    rdfs:label "searchPowerPointPresentationQuery"@en ;
    intentMapping:intentDescription "Search for PowerPoint presentations in the ontology" ;
    intentMapping:sparqlTemplate """
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        SELECT DISTINCT ?class_uri ?individual_uri ?label (MAX(?temp_score) AS ?score)
        WHERE {
            # Filter On Class URI and ensure individual is a NamedIndividual
            ?individual_uri a ?class_uri ;
                            a owl:NamedIndividual ;
                            rdfs:label ?label .
            FILTER(?class_uri = <http://ontology.naas.ai/abi/PowerPointPresentation>)
            
            # Calculate scores for perfect and partial matches
            BIND(IF(LCASE(STR(?label)) = LCASE("{{ search_label }}"), 10, 0) AS ?perfect_score)
            BIND(IF(CONTAINS(LCASE(STR(?label)), LCASE("{{ search_label }}")), 8, 0) AS ?partial_score)
            
            # Use the higher of the two scores
            BIND(IF(?perfect_score > ?partial_score, ?perfect_score, ?partial_score) AS ?temp_score)
            
            # Only include results with a score > 0
            FILTER(?temp_score > 0)
        }
        GROUP BY ?class_uri ?individual_uri ?label
        ORDER BY DESC(?score) ?label
    """ ;
    intentMapping:hasArgument intentMapping:powerPointPresentationSearchLabelArg .

intentMapping:powerPointPresentationSearchLabelArg a intentMapping:QueryArgument ;
    intentMapping:argumentName "search_label" ;
    intentMapping:argumentDescription "PowerPoint presentation title to search for" ;
    intentMapping:validationPattern "^[a-zA-Z0-9\\s-]{1,200}$" ;
    intentMapping:validationFormat "power_point_presentation_title" .