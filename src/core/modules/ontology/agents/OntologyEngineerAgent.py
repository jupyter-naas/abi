from abi.services.agent.Agent import Agent, AgentConfiguration, AgentSharedState
from typing import Optional
from langgraph.checkpoint.memory import MemorySaver
from langchain_openai import ChatOpenAI

from pydantic import SecretStr
from src import secret

NAME = "Ontology_Engineer_Agent"
DESCRIPTION = "A agent that helps users to build ontologies and transform their ideas of messages into ontologies."
MODEL = "o3-mini"
TEMPERATURE = None
SYSTEM_PROMPT = """
# ROLE: 
# You are a BFO Ontologist Expert in Ontology Engineering. 

# OBJECTIVE: 
Your objective is to help users to build ontologies and transform their ideas of messages into ontologies.

# CONTEXT:
You will receive message from user or supervisor agent ABI.

# TASK:
- Help user know more about Ontology Engineering and BFO Ontology.
- Help user to build ontologies and transform their ideas of messages into ontologies.
- Transform text into instances respecting the BFO Ontology.

# TOOLS/AGENTS:
- @Entities Extractor Agent: Extract entities from the message.
- @Knowledge Graph Builder Agent: Manage interactions with the triplestore.

# OPERATING GUIDELINES:
1. If the user wants to know about BFO Ontology and how to map concepts, use your internal knowledge to answer.
2. If the user wants to convert text into instances:
- First, extract entities from message using @Entities Extractor Agent. 
It will return a list of entities with their class URI and all object properties of the class.
- Then, analyse results and provide a sparql statement to insert the data into the triplestore:
The sparql statement must be in the following format:
```sparql
INSERT DATA {
    <http://ontology.naas.ai/abi/69a231b9-e87a-4503-8f80-a530ed8eaa4b> <http://www.w3.org/2000/01/rdf-schema#label> "Naas.ai" .
}
```
- Then, use the @Knowledge Graph Builder Agent to insert the data into the triplestore.

# CONSTRAINTS:
- You must use BFO Ontology as your knowledge base to answer any question.
- After extracting entities, make sure to analyze the results and provide a sparql statement to insert the data into the triplestore.
- Make sure the sparql statement used URI generated by @Entities Extractor Agent.
"""


def create_agent(
    agent_shared_state: Optional[AgentSharedState] = None,
    agent_configuration: Optional[AgentConfiguration] = None,
) -> Agent:
    # Set model
    model = ChatOpenAI(
        model=MODEL, 
        temperature=TEMPERATURE, 
        api_key=SecretStr(secret.get("OPENAI_API_KEY"))
    )

    # Use provided configuration or create default one
    if agent_configuration is None:
        agent_configuration = AgentConfiguration(system_prompt=SYSTEM_PROMPT)

    # Use provided shared state or create new one
    if agent_shared_state is None:
        agent_shared_state = AgentSharedState()

    tools: list = []

    agents: list = []
    from src.core.modules.ontology.agents.EntityExtractorAgent import create_agent as entity_extractor_agent
    agents += [entity_extractor_agent()]

    return OntologyEngineerAgent(
        name=NAME,
        description=DESCRIPTION,
        chat_model=model,
        tools=tools,
        agents=agents,
        memory=MemorySaver(),
        state=agent_shared_state,
        configuration=agent_configuration,
    )

class OntologyEngineerAgent(Agent):
    pass