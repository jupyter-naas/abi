services:
  abi:
    build:
      context: .
      dockerfile: docker/images/Dockerfile
    ports:
      - 9879:9879
      - 8501:8501
    volumes:
      - ./scripts:/app/scripts
      - ./uv.lock:/app/uv.lock
      - ./config.yaml:/app/config.yaml
      - ./pyproject.toml:/app/pyproject.toml
      - ./Makefile:/app/Makefile
      - ./storage:/app/storage
      - ./src:/app/src
      - ./lib:/app/lib
      - ./README.md:/app/README.md
      - cargo-cache:/root/.cargo
      - venv_cache:/app/.venv
    environment:
      - PYTHONPATH=/app
      - POSTGRES_URL=postgresql://abi_user:abi_password@postgres:5432/abi_memory
    env_file:
      - .env
    command: ["uv", "run"]
    depends_on:
      oxigraph:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - abi-network
    profiles:
      - container  # Only used when explicitly running in container mode
  
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: abi_user
      POSTGRES_PASSWORD: abi_password
      POSTGRES_DB: abi_memory
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U abi_user -d abi_memory"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - abi-network
    profiles:
      - local
      - prod
      - container

  oxigraph:
    image: oxigraph/oxigraph:latest
    expose:
      - 7878
    volumes:
      - oxigraph_data:/data
    command: ["serve", "--location", "/data", "--bind", "0.0.0.0:7878"]
    networks:
      - abi-network
    profiles:
      - local
      - prod

  oxigraph-proxy:
    image: nginx:alpine
    ports:
      - 7878:80
    volumes:
      - ./src/core/abi/apps/oxigraph_admin/nginx-oxigraph.conf:/etc/nginx/conf.d/default.conf:ro
      - ./src/core/abi/apps/oxigraph_admin/web:/usr/share/nginx/html/web:ro
    depends_on:
      - oxigraph
    networks:
      - abi-network
    profiles:
      - local
      - prod

  yasgui:
    image: erikap/yasgui:latest
    platform: linux/amd64  # Force x86_64 for compatibility
    ports:
      - 3000:80
    environment:
      - DEFAULT_SPARQL_ENDPOINT=http://127.0.0.1:7878/query
    depends_on:
      - oxigraph
    networks:
      - abi-network
    profiles:
      - local
      - prod

  dagster:
    build:
      context: .
      dockerfile: docker/images/Dockerfile
    ports:
      - 3001:3000  # Changed to 3001 to avoid conflict with yasgui
    volumes:
      - ./scripts:/app/scripts
      - ./uv.lock:/app/uv.lock
      - ./config.yaml:/app/config.yaml
      - ./pyproject.toml:/app/pyproject.toml
      - ./src:/app/src
      - ./lib:/app/lib
      - ./README.md:/app/README.md
      - venv_cache:/app/.venv
      - dagster_home:/app/.dagster
    platform: linux/arm64
    environment:
      - PYTHONPATH=/app
      - DAGSTER_HOME=/app/.dagster
    command: ["sh", "-c", "uv sync --frozen --all-extras && uv run python scripts/generate_dagster_command.py | xargs uv run"]
    networks:
      - abi-network
    profiles:
      - local
      - prod

  # Docker Model Runner - Gemma Chat Model
  gemma-chat:
    image: ollama/ollama:latest
    ports:
      - "12434:11434"
    volumes:
      - gemma_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
    networks:
      - abi-network
    profiles:
      - local
      - prod
    entrypoint: ["/bin/bash", "-c", "ollama serve & sleep 10 && ollama pull gemma2:2b && wait"]

  # Docker Model Runner - Embedding Model  
  gemma-embedding:
    image: ollama/ollama:latest
    ports:
      - "12435:11434"
    volumes:
      - embedding_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
    networks:
      - abi-network
    profiles:
      - local
      - prod
    entrypoint: ["/bin/bash", "-c", "ollama serve & sleep 10 && ollama pull nomic-embed-text && wait"]

volumes:
  cargo-cache:
  venv_cache:
  oxigraph_data:
  postgres_data:
  dagster_home:
  gemma_data:
  embedding_data: 

networks:
  abi-network:
    driver: bridge
