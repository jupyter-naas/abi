// User Intent: Create new integration

Required input: IntegrationName (PascalCase if not convert to it)

Template to use:

```python
from lib.abi.integration.integration import Integration, IntegrationConfiguration
from dataclasses import dataclass

@dataclass
class YourIntegrationConfiguration(IntegrationConfiguration):
    """Configuration for YourIntegration.
    
    Attributes:
        attribute_1 (str): Description of attribute_1
        attribute_2 (int): Description of attribute_2
    """
    attribute_1: str
    attribute_2: int

class YourIntegration(Integration):
    """YourIntegration class for interacting with YourService.
    
    This class provides methods to interact with YourService's API endpoints.
    It handles authentication and request management.
    
    Attributes:
        __configuration (YourIntegrationConfiguration): Configuration instance
            containing necessary credentials and settings.
    
    Example:
        >>> config = YourIntegrationConfiguration(
        ...     attribute_1="value1",
        ...     attribute_2=42
        ... )
        >>> integration = YourIntegration(config)
    """

    __configuration: YourIntegrationConfiguration

    def __init__(self, configuration: YourIntegrationConfiguration):
        super().__init__(configuration)
        self.__configuration = configuration

```

Output: Create file in `src/integrations/IntegrationName.py`

// User Intent: Create new pipeline or Update existing pipeline

Required input: PipelineName (PascalCase if not convert to it)

Template to use:

```python
from abi.pipeline import Pipeline, PipelineConfiguration, PipelineParameters
from dataclasses import dataclass
from src.data.integrations import YourIntegration
from abi.utils.Graph import ABIGraph
from rdflib import Graph
from abi.services.ontology_store.OntologyStorePorts import IOntologyStoreService
from src import secret
from fastapi import APIRouter
from langchain_core.tools import StructuredTool

@dataclass
class YourPipelineConfiguration(PipelineConfiguration):
    """Configuration for YourPipeline.
    
    Attributes:
        integration (YourIntegration): The integration instance to use
        ontology_store (IOntologyStoreService): The ontology store service to use
        ontology_store_name (str): Name of the ontology store to use. Defaults to "yourstorename"
    """
    integration: YourIntegration
    ontology_store: IOntologyStoreService
    ontology_store_name: str = "yourstorename"

class YourPipelineParameters(PipelineParameters):
    """Parameters for YourPipeline execution.
    
    Attributes:
        parameter_1 (str): Description of parameter_1
        parameter_2 (int): Description of parameter_2
    """
    parameter_1: str
    parameter_2: int

class YourPipeline(Pipeline):
    __configuration: YourPipelineConfiguration
    
    def __init__(self, configuration: YourPipelineConfiguration):
        self.__configuration = configuration
        
    def as_tools(self) -> list[StructuredTool]:
        """Returns a list of LangChain tools for this pipeline.
        
        Returns:
            list[StructuredTool]: List containing the pipeline tool
        """
        return [StructuredTool(
            name="your_pipeline",
            description="Executes the pipeline with the given parameters",
            func=lambda **kwargs: self.run(YourPipelineParameters(**kwargs)),
            args_schema=YourPipelineParameters
        )]

    def as_api(self, router: APIRouter) -> None:
        """Adds API endpoints for this pipeline to the given router.
        
        Args:
            router (APIRouter): FastAPI router to add endpoints to
        """
        @router.post("/YourPipeline")
        def run(parameters: YourPipelineParameters):
            return self.run(parameters).serialize(format="turtle")

    def run(self, parameters: YourPipelineParameters) -> Graph:        
        graph = ABIGraph()
        
        # ... Add your code here
        
        self.__configuration.ontology_store.insert(self.__configuration.ontology_store_name, graph)
        return graph

```

Output: Create file in `src/data/pipelines/ToolNameIfRelevent/PipelineName.py`

// User Intent: Create new workflow

Required input: WorkflowName (PascalCase if not convert to it)

Template to use:

```python
from abi.workflow import Workflow, WorkflowConfiguration
from src.integrations import YourIntegration, YourIntegrationConfiguration
from src import secret
from dataclasses import dataclass
from pydantic import BaseModel, Field

@dataclass
class YourWorkflowConfiguration(WorkflowConfiguration):
    attribute_1 : str
    attribute_2 : int

class YourWorkflow(Workflow):
    __configuration: YourWorkflowConfiguration
    
    def __init__(self, configuration: YourWorkflowConfiguration):
        super().__init__(configuration)
        self.__configuration = configuration
        
        self.__your_integration = YourIntegration(
            YourIntegrationConfiguration(attribute_1=self.__configuration.attribute_1, attribute_2=self.__configuration.attribute_2)
        )
    def run(self) -> str:

        # ... Add your code here
        
        return "Your result"
        

def api():
    import fastapi
    import uvicorn
    
    app = fastapi.FastAPI()
    
    @app.get("/your_endpoint")
    def your_endpoint():
        configuration = YourWorkflowConfiguration()
        workflow = YourWorkflow(configuration)
        return workflow.run()
    
    uvicorn.run(app, host="0.0.0.0", port=9877)  # Note: Using different port from github workflow

def main():
    
    configuration = YourWorkflowConfiguration(attribute_1="attribute_1", attribute_2=1)
    workflow = YourWorkflow(configuration)
    turtle = workflow.run()
    print(turtle)

def as_tool():
    from langchain_core.tools import StructuredTool
    
    def your_tool_function():
        configuration = YourWorkflowConfiguration(attribute_1="attribute_1", attribute_2=1)
        workflow = YourWorkflow(configuration)
        return workflow.run()
    
    
    class YourToolSchema(BaseModel):
        attribute_1: str = Field(..., description="The attribute_1 of the tool.")
        attribute_2: int = Field(..., description="The attribute_2 of the tool.")
    
    return StructuredTool(
        name="your_tool_name",
        description="Your tool description.",
        func=your_tool_function,
        args_schema=YourToolSchema
    )

if __name__ == "__main__":
    main()
```

Output: Create file in `src/workflows/WorkflowName.py`
